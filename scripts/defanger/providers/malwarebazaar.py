"""MalwareBazaar threat intelligence provider"""
import time
import json
from typing import Dict, List, Any
from .base import TIProvider
from ..settings import GREEN, MAGENTA, RED, RESET


class MalwareBazaarProvider(TIProvider):
    """MalwareBazaar provider for hash information"""
    
    def __init__(self):
        super().__init__(None, "MalwareBazaar")
    
    def get_supported_ioc_types(self) -> List[str]:
        return ["hash"]
    
    async def query(self, ioc_value: str, ioc_type: str, session, max_retries=3, backoff_factor=1, **kwargs) -> Dict[str, Any]:
        """Query MalwareBazaar for hash information"""
        from ..enricher import fetch_with_retries
        
        url = "https://mb-api.abuse.ch/api/v1/"
        payload = {"query": "get_info", "hash": ioc_value}
        headers = {"Content-Type": "application/json"}
        
        try:
            resp = await fetch_with_retries(
                session, url,
                headers=headers,
                json_data=payload,
                method="POST",
                max_retries=max_retries,
                backoff_factor=backoff_factor
            )
            return resp
        except Exception as e:
            print(f"[MalwareBazaar ERROR] {str(e)}")
            return {"error": str(e)}
    
    def extract_fields(self, raw_response: Dict[str, Any], ioc_type: str) -> Dict[str, Any]:
        """Extract relevant fields from MalwareBazaar response"""
        if "error" in raw_response:
            return {"found": False, "error": raw_response["error"]}
        
        if raw_response.get("query_status") == "ok" and raw_response.get("data"):
            sample = raw_response["data"][0]
            return {
                "signature": sample.get('signature', '-'),
                "file_type": sample.get('file_type', '-'),
                "delivery_method": sample.get('delivery_method', '-'),
                "first_seen": sample.get('first_seen', '-'),
                "found": True
            }
        else:
            return {"found": False}
    
    def format_display(self, ioc_value: str, ioc_type: str, extracted_data: Dict[str, Any]) -> List[str]:
        """Format MalwareBazaar data for display"""
        lines = []
        lines.append(f"  {MAGENTA}🧪 MalwareBazaar:{RESET}\n")
        
        if "error" in extracted_data:
            lines.append(f"    {RED}ℹ️  Error{RESET}: {extracted_data['error']}\n")
        elif extracted_data.get("found"):
            lines.append(f"    {GREEN}Signature{RESET}: {extracted_data.get('signature', '-')}\n")
            lines.append(f"    {GREEN}File Type{RESET}: {extracted_data.get('file_type', '-')}\n")
            lines.append(f"    {GREEN}Delivery Method{RESET}: {extracted_data.get('delivery_method', '-')}\n")
            lines.append(f"    {GREEN}First Seen{RESET}: {extracted_data.get('first_seen', '-')}\n")
        else:
            lines.append(f"    {RED}No result found or error occurred.{RESET}\n")
        
        lines.append("\n")
        return lines
    
    def get_display_name(self) -> str:
        return f"{MAGENTA}🧪 MalwareBazaar{RESET}"